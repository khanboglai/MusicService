services:
  postgres_artist:
    image: postgres:16.4
    container_name: artist_service_db
    networks:
      - music_network
    environment:
      POSTGRES_USER: artist
      POSTGRES_PASSWORD: pswd
      POSTGRES_DB: artist_data
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5435:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    command: >
      postgres -c max_connections=1000
               -c shared_buffers=256MB
               -c effective_cache_size=768MB
               -c maintenance_work_mem=64MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U artist -d artist_data" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  artist_web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: artist_web
    networks:
      - music_network
    restart: always
    ports:
      - "8005:8005"
    depends_on:
      - postgres_artist
#      - elasticsearch
#      - rabbitmq
    environment:
      DB_USER: artist
      DB_PASSWORD: pswd
      DB_HOST: artist_service_db
      DB_PORT: 5435
      DB_NAME: artist_data
      SECRET_KEY: 'z9t9w6dluej8fupds3fvefoozz6wlymglropksbavn32ehin9lclertyweco4rhri2weg1r3s0x4024yup42ufg4rgt6830tbfvm'
      ALGORITHM: 'HS256'
#      ELASTICSEARCH_HOST: elasticsearch
#      ELASTICSEARCH_PORT: 9200
    volumes:
      - .:/src

#  grpc_server:
#    build: .
#    command: python -m src.grpc.server
#    ports:
#      - "50051:50051"
#    volumes:
#      - ./src:/src

volumes:
  pgdata:
    driver: local

networks:
  music_network:
    name: music_network